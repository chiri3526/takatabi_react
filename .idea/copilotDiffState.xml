<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/pages/CategoryPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/CategoryPage.js" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import styled from '@emotion/styled';&#10;import { Link } from 'react-router-dom';&#10;import { theme } from '../styles/theme';&#10;import { FaMapMarkerAlt, FaGlobeAsia, FaCouch, FaTrain } from 'react-icons/fa';&#10;import { fetchArticles } from '../api/microcms';&#10;&#10;const BackLink = styled(Link)`&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 0.5em;&#10;  /* 上は元の余白を保持し、左と下に余白を追加 */&#10;  margin: ${theme.spacing.large} 0 ${theme.spacing.large} ${theme.spacing.medium};&#10;  color: ${theme.colors.primary};&#10;  text-decoration: none;&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  background: #f6fff6;&#10;  border-radius: 6px;&#10;  padding: 0.5em 1.2em;&#10;  box-shadow: 0 2px 8px rgba(0,128,64,0.07);&#10;  border: 1.5px solid ${theme.colors.primary}33;&#10;  transition: background 0.2s, color 0.2s, border 0.2s;&#10;  &amp;:hover {&#10;    background: ${theme.colors.primary};&#10;    color: #fff;&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;&#10;const BlogGrid = styled.div`&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: ${theme.spacing.large};&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;const BlogCard = styled.article`&#10;  background: ${theme.colors.white};&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;  &amp;:hover {&#10;    transform: translateY(-5px);&#10;  }&#10;`;&#10;const BlogImage = styled.img`&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;`;&#10;const BlogContent = styled.div`&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;const BlogTitle = styled.h2`&#10;  color: ${theme.colors.text};&#10;  margin: 0 0 ${theme.spacing.small};&#10;  font-size: 1rem;&#10;`;&#10;const BlogExcerpt = styled.p`&#10;  color: ${theme.colors.text};&#10;  margin: 0;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;`;&#10;&#10;&#10;const categories = [&#10;  { key: 'domestic', label: '国内旅行', cmsName: '国内旅行', icon: &lt;FaMapMarkerAlt /&gt; },&#10;  { key: 'overseas', label: '海外旅行', cmsName: '海外旅行', icon: &lt;FaGlobeAsia /&gt; },&#10;  { key: 'lounge', label: 'ラウンジ', cmsName: 'ラウンジ', icon: &lt;FaCouch /&gt; },&#10;  { key: 'train', label: '鉄道', cmsName: '鉄道', icon: &lt;FaTrain /&gt; }&#10;];&#10;&#10;function importAllJson(r) {&#10;  return r.keys().map(key =&gt; {&#10;    const data = r(key);&#10;    return {&#10;      id: data.id || data.slug || key.replace(/^.*[/]/, '').replace(/\.json$/, ''),&#10;      ...data&#10;    };&#10;  });&#10;}&#10;const jsonArticles = importAllJson(require.context('../articles', false, /\.json$/));&#10;&#10;const blogPosts = [&#10;  ...jsonArticles&#10;  // 既存のハードコード記事は削除しました。必要ならここに追加してください。&#10;];&#10;&#10;const CategoryPage = ({ category }) =&gt; {&#10;  const [cmsArticles, setCmsArticles] = useState([]);&#10;&#10;  useEffect(() =&gt; {&#10;    fetchArticles().then(data =&gt; {&#10;      if (data &amp;&amp; data.contents) {&#10;        setCmsArticles(data.contents);&#10;      }&#10;    });&#10;  }, []);&#10;&#10;  const cat = categories.find(c =&gt; c.key === category);&#10;  // microCMS記事とローカル記事を統合&#10;  const posts = [&#10;    ...cmsArticles.filter(post =&gt; {&#10;      if (post.category &amp;&amp; typeof post.category === 'object') {&#10;        return post.category.name === cat.cmsName;&#10;      }&#10;      return post.category === category;&#10;    }),&#10;    ...blogPosts.filter(post =&gt; post.category === category &amp;&amp; !cmsArticles.some(cms =&gt; {&#10;      if (cms.category &amp;&amp; typeof cms.category === 'object') {&#10;        return cms.category.name === cat.cmsName;&#10;      }&#10;      return cms.category === category;&#10;    }))&#10;  ];&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;BlogGrid&gt;&#10;        {posts.map(post =&gt; (&#10;          &lt;Link&#10;            to={`/?p=${post.slug || post.id}`}&#10;            key={post.id}&#10;            style={{ textDecoration: 'none' }}&#10;          &gt;&#10;            &lt;BlogCard&gt;&#10;              &lt;BlogImage&#10;                src={&#10;                  post.image&#10;                    ? typeof post.image === 'string'&#10;                      ? post.image.startsWith('/')&#10;                        ? post.image&#10;                        : `/${post.image}`&#10;                      : post.image.url // microCMS形式&#10;                    : '/sample-images/no-image.jpg'&#10;                }&#10;                alt={post.title}&#10;                onError={(e) =&gt; {&#10;                  e.target.src = '/sample-images/no-image.jpg';&#10;                }}&#10;              /&gt;&#10;              &lt;BlogContent&gt;&#10;                &lt;BlogTitle&gt;{post.title}&lt;/BlogTitle&gt;&#10;                &lt;BlogExcerpt&gt;{post.excerpt}&lt;/BlogExcerpt&gt;&#10;              &lt;/BlogContent&gt;&#10;            &lt;/BlogCard&gt;&#10;          &lt;/Link&gt;&#10;        ))}&#10;      &lt;/BlogGrid&gt;&#10;      &lt;BackLink to=&quot;/&quot;&gt;&#10;        トップページへ戻る&#10;      &lt;/BackLink&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import styled from '@emotion/styled';&#10;import { Link } from 'react-router-dom';&#10;import { theme } from '../styles/theme';&#10;import { FaMapMarkerAlt, FaGlobeAsia, FaCouch, FaTrain } from 'react-icons/fa';&#10;import { fetchArticles } from '../api/microcms';&#10;&#10;const BackLink = styled(Link)`&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 0.5em;&#10;  /* 上は元の余白を保持し、左と下に余白を追加 */&#10;  margin: ${theme.spacing.large} 0 ${theme.spacing.large} ${theme.spacing.medium};&#10;  color: ${theme.colors.primary};&#10;  text-decoration: none;&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  background: #f6fff6;&#10;  border-radius: 6px;&#10;  padding: 0.5em 1.2em;&#10;  box-shadow: 0 2px 8px rgba(0,128,64,0.07);&#10;  border: 1.5px solid ${theme.colors.primary}33;&#10;  transition: background 0.2s, color 0.2s, border 0.2s;&#10;  &amp;:hover {&#10;    background: ${theme.colors.primary};&#10;    color: #fff;&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;&#10;const BlogGrid = styled.div`&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: ${theme.spacing.large};&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;const BlogCard = styled.article`&#10;  background: ${theme.colors.white};&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;  &amp;:hover {&#10;    transform: translateY(-5px);&#10;  }&#10;`;&#10;const BlogImage = styled.img`&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;`;&#10;const BlogContent = styled.div`&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;const BlogTitle = styled.h2`&#10;  color: ${theme.colors.text};&#10;  margin: 0 0 ${theme.spacing.small};&#10;  font-size: 1rem;&#10;`;&#10;const BlogExcerpt = styled.p`&#10;  color: ${theme.colors.text};&#10;  margin: 0;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;`;&#10;&#10;&#10;const categories = [&#10;  { key: 'domestic', label: '国内旅行', cmsName: '国内旅行', icon: &lt;FaMapMarkerAlt /&gt; },&#10;  { key: 'overseas', label: '海外旅行', cmsName: '海外旅行', icon: &lt;FaGlobeAsia /&gt; },&#10;  { key: 'lounge', label: 'ラウンジ', cmsName: 'ラウンジ', icon: &lt;FaCouch /&gt; },&#10;  { key: 'train', label: '鉄道', cmsName: '鉄道', icon: &lt;FaTrain /&gt; }&#10;];&#10;&#10;function importAllJson(r) {&#10;  return r.keys().map(key =&gt; {&#10;    const data = r(key);&#10;    return {&#10;      id: data.id || data.slug || key.replace(/^.*[/]/, '').replace(/\.json$/, ''),&#10;      ...data&#10;    };&#10;  });&#10;}&#10;const jsonArticles = importAllJson(require.context('../articles', false, /\.json$/));&#10;&#10;const blogPosts = [&#10;  ...jsonArticles&#10;  // 既存のハードコード記事は削除しました。必要ならここに追加してください。&#10;];&#10;&#10;const CategoryPage = ({ category }) =&gt; {&#10;  const [cmsArticles, setCmsArticles] = useState([]);&#10;&#10;  useEffect(() =&gt; {&#10;    fetchArticles().then(data =&gt; {&#10;      if (data &amp;&amp; data.contents) {&#10;        setCmsArticles(data.contents);&#10;      }&#10;    });&#10;  }, []);&#10;&#10;  const cat = categories.find(c =&gt; c.key === category);&#10;  // microCMS記事とローカル記事を統合&#10;  const posts = [&#10;    ...cmsArticles.filter(post =&gt; {&#10;      if (post.category &amp;&amp; typeof post.category === 'object') {&#10;        return post.category.name === cat.cmsName;&#10;      }&#10;      return post.category === category;&#10;    }),&#10;    ...blogPosts.filter(post =&gt; post.category === category &amp;&amp; !cmsArticles.some(cms =&gt; {&#10;      if (cms.category &amp;&amp; typeof cms.category === 'object') {&#10;        return cms.category.name === cat.cmsName;&#10;      }&#10;      return cms.category === category;&#10;    }))&#10;  ];&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;BlogGrid&gt;&#10;        {posts.map(post =&gt; (&#10;          &lt;Link&#10;            to={`/?p=${post.slug || post.id}`}&#10;            key={post.id}&#10;            style={{ textDecoration: 'none' }}&#10;          &gt;&#10;            &lt;BlogCard&gt;&#10;              &lt;BlogImage&#10;                src={&#10;                  post.image&#10;                    ? typeof post.image === 'string'&#10;                      ? post.image.startsWith('/')&#10;                        ? post.image&#10;                        : `/${post.image}`&#10;                      : post.image.url // microCMS形式&#10;                    : '/sample-images/no-image.jpg'&#10;                }&#10;                alt={post.title}&#10;                onError={(e) =&gt; {&#10;                  e.target.src = '/sample-images/no-image.jpg';&#10;                }}&#10;              /&gt;&#10;              &lt;BlogContent&gt;&#10;                &lt;BlogTitle&gt;{post.title}&lt;/BlogTitle&gt;&#10;                &lt;BlogExcerpt&gt;{post.excerpt}&lt;/BlogExcerpt&gt;&#10;              &lt;/BlogContent&gt;&#10;            &lt;/BlogCard&gt;&#10;          &lt;/Link&gt;&#10;        ))}&#10;      &lt;/BlogGrid&gt;&#10;      &lt;BackLink to=&quot;/&quot;&gt;&#10;        トップページへ戻る&#10;      &lt;/BackLink&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default CategoryPage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>