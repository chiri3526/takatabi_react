<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/pages/ArticlePage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/ArticlePage.js" />
              <option name="originalContent" value="import React, { useEffect, useRef, useMemo } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import styled from '@emotion/styled';&#10;import { theme } from '../styles/theme';&#10;import { FaLink, FaArrowLeft } from 'react-icons/fa';&#10;import article1234 from '../articles/1234';&#10;import article1235 from '../articles/1235';&#10;import articleTest from '../articles/test';&#10;import { fetchArticleById } from '../api/microcms';&#10;&#10;// JSONファイルを一括取得（記事一覧を作るため）&#10;function importAllJson(r) {&#10;  return r.keys().map(key =&gt; {&#10;    const data = r(key);&#10;    return {&#10;      id: data.id || data.slug || key.replace(/^.*[/]/, '').replace(/\.json$/, ''),&#10;      ...data&#10;    };&#10;  });&#10;}&#10;&#10;const jsonArticles = importAllJson(require.context('../articles', false, /\.json$/));&#10;&#10;// ローカル記事配列（JSON から読み込んだもの + hand-coded modules）&#10;const blogPosts = [&#10;  ...jsonArticles,&#10;  article1234,&#10;  article1235,&#10;  articleTest&#10;];&#10;&#10;// Google AdSense script を head に挿入するユーティリティ（重複挿入を防止）&#10;function useAdsenseScript() {&#10;  // 実行環境でのみ DOM にスクリプトを挿入&#10;  try {&#10;    if (typeof document === 'undefined') return;&#10;    if (!document.querySelector('script[src*=&quot;adsbygoogle.js?client=ca-pub-7728107798566122&quot;]')) {&#10;      const script = document.createElement('script');&#10;      script.async = true;&#10;      script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7728107798566122';&#10;      script.crossOrigin = 'anonymous';&#10;      document.head.appendChild(script);&#10;    }&#10;  } catch (e) {&#10;    // サーバーサイド環境やテスト環境では無視&#10;  }&#10;}&#10;&#10;// 目次生成関数&#10;function generateTocAndContent(html) {&#10;  if (!html) return { toc: [], html };&#10;  let idx = 0;&#10;  const toc = [];&#10;  // h2/h3タグにidを付与しつつtoc配列を作る&#10;  let newHtml = html.replace(/&lt;(h[23])([^&gt;]*)&gt;(.*?)&lt;\/\1&gt;/g, (match, tag, attrs, text) =&gt; {&#10;    const cleanText = text.replace(/&lt;[^&gt;]+&gt;/g, '');&#10;    const id = `heading-${tag}-${idx++}`;&#10;    toc.push({ tag, text: cleanText, id });&#10;    return `&lt;${tag} id=&quot;${id}&quot;${attrs}&gt;${text}&lt;/${tag}&gt;`;&#10;  });&#10;  // imgタグのsrcが/contents/で始まる場合、絶対パスに補正&#10;  newHtml = newHtml.replace(/&lt;img([^&gt;]*?)src=[&quot;'](\/contents\/[^&quot;'&gt;]+)[&quot;']([^&gt;]*)&gt;/g, (match, before, src, after) =&gt; {&#10;    return `&lt;img${before}src=&quot;${src}&quot;${after}&gt;`;&#10;  });&#10;&#10;  // --- 追加: img の inline 属性(width/height/style) を削除し class=&quot;cms-image&quot; を付与 ---&#10;  newHtml = newHtml.replace(/&lt;img([^&gt;]*)&gt;/g, (match, attrs) =&gt; {&#10;    // attrs 部から width, height, style を削除&#10;    let cleaned = attrs.replace(/\s*(width|height)=[&quot;'][^&quot;']*[&quot;']/gi, '');&#10;    cleaned = cleaned.replace(/\s*style=[&quot;'][^&quot;']*[&quot;']/gi, '');&#10;    // class があれば追記、なければ追加&#10;    if (/class=/.test(cleaned)) {&#10;      cleaned = cleaned.replace(/class=(&quot;|')(.*?)(&quot;|')/i, (m, q, cls) =&gt; `class=${q}${cls} cms-image${q}`);&#10;    } else {&#10;      cleaned = `${cleaned} class=&quot;cms-image&quot;`;&#10;    }&#10;    return `&lt;img${cleaned}&gt;`;&#10;  });&#10;&#10;  return { toc, html: newHtml };&#10;}&#10;&#10;const TocList = styled.ul`&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;`;&#10;const TocItem = styled.li`&#10;  margin: 0.2em 0 0.2em 0.5em;&#10;  &amp;.toc-h3 { margin-left: 1.5em; font-size: 0.95em; }&#10;`;&#10;const TocLink = styled.a`&#10;  color: #2E7D32;&#10;  text-decoration: none;&#10;  &amp;:hover { text-decoration: underline; color: #1B5E20; }&#10;`;&#10;&#10;&#10;// 目次(Toc)コンポーネント&#10;const TocContainer = styled.nav`&#10;  background: #f6fff6;&#10;  border: 2px solid #2E7D32;&#10;  border-radius: 12px;&#10;  padding: 1em 1.5em;&#10;  margin: 2em auto 2em auto;&#10;  font-size: 0.98rem;&#10;  width: 60%;&#10;  max-width: 500px;&#10;  min-width: 220px;&#10;  box-sizing: border-box;&#10;  display: block;&#10;  @media (max-width: 600px) {&#10;    width: 80vw;&#10;    font-size: 0.92rem;&#10;    padding: 0.7em 0.7em;&#10;  }&#10;`;&#10;const ArticleContent = styled.div`&#10;  color: ${theme.colors.text};&#10;  font-size: 1.0rem; /* 基本フォントを小さめに調整 */&#10;  line-height: 1.7;&#10;  font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;&#10;  h2 {&#10;    color: ${theme.colors.primary};&#10;    font-size: 1.5rem;&#10;    border-left: 7px solid ${theme.colors.primary};&#10;    border-radius: 0 12px 12px 0;&#10;    padding-left: 0.7em;&#10;    margin: 2em 0 1em 0;&#10;    font-weight: bold;&#10;    background: #f6fff6;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  h3 {&#10;    color: ${theme.colors.secondary};&#10;    font-size: 1.2rem;&#10;    margin: 1.5em 0 0.7em 0;&#10;    font-weight: bold;&#10;    border-left: 5px solid ${theme.colors.secondary};&#10;    border-radius: 0 10px 10px 0;&#10;    padding-left: 0.6em;&#10;    background: #eaffea;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  h4 {&#10;    color: ${theme.colors.accent};&#10;    font-size: 1.05rem;&#10;    margin: 1.2em 0 0.5em 0;&#10;    font-weight: bold;&#10;    border-left: 4px dashed ${theme.colors.accent};&#10;    border-radius: 0 8px 8px 0;&#10;    padding-left: 0.5em;&#10;    background: #f9fff6;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  strong, .em {&#10;    color: ${theme.colors.highlight};&#10;    background: #fffbe6;&#10;    font-weight: bold;&#10;    padding: 0 0.2em;&#10;    border-radius: 4px;&#10;  }&#10;&#10;  /* 本文内画像を大きく表示するスタイル */&#10;  img,&#10;  .cms-image {&#10;    border-radius: 16px;&#10;    /* デフォルトはコンテナ幅より左右に少し拡張して大きく見せる */&#10;    width: calc(100% + 120px) !important;&#10;    max-width: none !important;&#10;    height: auto !important;&#10;    object-fit: cover;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.07);&#10;    margin: 1.6em -32px;&#10;    display: block;&#10;  }&#10;&#10;  /* タブレットで少し控えめに */&#10;  @media (max-width: 900px) {&#10;    img,&#10;    .cms-image {&#10;      width: calc(100% + 80px) !important;&#10;      margin: 1.4em -16px;&#10;    }&#10;  }&#10;&#10;  /* モバイルでは画像を少しはみ出させて目立たせつつ中央寄せ */&#10;  @media (max-width: 600px) {&#10;    font-size: 1.02rem; /* モバイルでも少し小さめに */&#10;    img.cms-image,&#10;    img {&#10;      width: calc(100% + 32px) !important;&#10;      max-width: none !important;&#10;      margin: 1.2em 50%;&#10;      transform: translateX(-50%);&#10;      border-radius: 12px;&#10;      display: block;&#10;    }&#10;  }&#10;`;&#10;&#10;const ArticleContainer = styled.div`&#10;  max-width: 700px;&#10;  margin: 40px auto;&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.08);&#10;  padding: ${theme.spacing.xlarge};&#10;`;&#10;const ArticleTitle = styled.h1`&#10;  font-size: 1.2rem; // 小さめに変更&#10;  color: ${theme.colors.primary};&#10;  margin-bottom: ${theme.spacing.medium};&#10;`;&#10;const ArticleImageEyeCatch = styled.img`&#10;  width: 100%;&#10;  aspect-ratio: 4 / 3;&#10;  object-fit: cover;&#10;  border-radius: 18px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.13);&#10;  background: #fff;&#10;  margin-bottom: 1.5em;&#10;`;&#10;const BackLink = styled(Link)`&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 0.5em;&#10;  margin-top: ${theme.spacing.large};&#10;  color: ${theme.colors.primary};&#10;  text-decoration: none;&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  background: #f6fff6;&#10;  border-radius: 6px;&#10;  padding: 0.5em 1.2em;&#10;  box-shadow: 0 2px 8px rgba(0,128,64,0.07);&#10;  border: 1.5px solid ${theme.colors.primary}33;&#10;  transition: background 0.2s, color 0.2s, border 0.2s;&#10;  &amp;:hover {&#10;    background: ${theme.colors.primary};&#10;    color: #fff;&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;&#10;// 関連記事リスト&#10;const RelatedSection = styled.div`&#10;  margin-top: 48px;&#10;  text-align: center;&#10;`;&#10;const RelatedTitle = styled.h3`&#10;  color: ${theme.colors.primary};&#10;  font-size: 1.3rem;&#10;  font-weight: bold;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.5em;&#10;  margin-bottom: 1.5em;&#10;`;&#10;const RelatedList = styled.div`&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  justify-content: center;&#10;  gap: 2em;&#10;`;&#10;const RelatedCard = styled(Link)`&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  width: 180px;&#10;  background: #f6fff6;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.07);&#10;  text-decoration: none;&#10;  transition: box-shadow 0.2s;&#10;  border: 2px solid ${theme.colors.primary}22;&#10;  padding: 1em 0.5em 1.2em 0.5em;&#10;  &amp;:hover {&#10;    box-shadow: 0 4px 16px rgba(0,128,64,0.13);&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;const RelatedImage = styled.img`&#10;  width: 100%;&#10;  aspect-ratio: 4 / 3;&#10;  object-fit: cover;&#10;  border-radius: 18px;&#10;  margin-bottom: 0.7em;&#10;`;&#10;const RelatedCardTitle = styled.div`&#10;  color: ${theme.colors.primary};&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  text-align: center;&#10;  margin-top: 0.2em;&#10;`;&#10;&#10;const ArticlePage = (props) =&gt; {&#10;  useAdsenseScript();&#10;  const adRef = useRef(null);&#10;  const id = props.id;&#10;  const [cmsArticle, setCmsArticle] = React.useState(null);&#10;  const post = useMemo(() =&gt; {&#10;    // まずローカル記事を探す&#10;    const local = blogPosts.find(p =&gt; p.slug === id || p.id === id);&#10;    if (local) return local;&#10;    // microCMS記事（APIで取得）&#10;    return cmsArticle;&#10;  }, [id, cmsArticle]);&#10;&#10;  useEffect(() =&gt; {&#10;    window.scrollTo(0, 0);&#10;    // ローカル記事がなければmicroCMS APIで取得&#10;    if (!blogPosts.find(p =&gt; p.slug === id || p.id === id)) {&#10;      fetchArticleById(id).then(data =&gt; setCmsArticle(data)).catch(() =&gt; setCmsArticle(null));&#10;    }&#10;  }, [id]);&#10;&#10;  // AdSense広告の初期化&#10;  useEffect(() =&gt; {&#10;    if (window.adsbygoogle &amp;&amp; adRef.current) {&#10;      try {&#10;        window.adsbygoogle.push({});&#10;      } catch (e) {}&#10;    }&#10;  }, [id]);&#10;  // 目次とid付きHTML生成&#10;  const { toc, html: contentWithIds } = useMemo(() =&gt; generateTocAndContent(post?.content), [post]);&#10;  // 関連記事（同じカテゴリで自分以外）&#10;  const related = blogPosts.filter(p =&gt; p.category === post?.category &amp;&amp; p.slug !== id);&#10;&#10;  if (!post) {&#10;    return &lt;ArticleContainer&gt;記事が見つかりませんでした。&lt;/ArticleContainer&gt;;&#10;  }&#10;&#10;  // アイキャッチ画像&#10;  const imageUrl = post.image?.url || post.image;&#10;&#10;  return (&#10;    &lt;&gt;&#10;  {/* EyeCatch削除: 記事ごとの画像のみ表示 */}&#10;      &lt;ArticleContainer&gt;&#10;        &lt;ArticleTitle&gt;{post.title}&lt;/ArticleTitle&gt;&#10;        &lt;div style={{display:'flex', justifyContent:'center'}}&gt;&#10;          &lt;ArticleImageEyeCatch src={imageUrl} alt={post.title} /&gt;&#10;        &lt;/div&gt;&#10;        {/* 目次 */}&#10;        {toc.length &gt; 0 &amp;&amp; (&#10;          &lt;TocContainer aria-label=&quot;目次&quot;&gt;&#10;            &lt;strong style={{color:'#1B5E20'}}&gt;目次&lt;/strong&gt;&#10;            &lt;TocList&gt;&#10;              {toc.map(item =&gt; (&#10;                &lt;TocItem key={item.id} className={`toc-${item.tag}`}&gt;&#10;                  &lt;TocLink href={`#${item.id}`}&gt;{item.text}&lt;/TocLink&gt;&#10;                &lt;/TocItem&gt;&#10;              ))}&#10;            &lt;/TocList&gt;&#10;          &lt;/TocContainer&gt;&#10;        )}&#10;        &lt;ArticleContent dangerouslySetInnerHTML={{ __html: contentWithIds }} /&gt;&#10;        {/* Google AdSense in-article広告ユニット */}&#10;        &lt;div style={{margin: '32px 0', display: 'flex', justifyContent: 'center'}}&gt;&#10;          &lt;ins className=&quot;adsbygoogle&quot;&#10;            style={{ display: 'block', textAlign: 'center' }}&#10;            data-ad-layout=&quot;in-article&quot;&#10;            data-ad-format=&quot;fluid&quot;&#10;            data-ad-client=&quot;ca-pub-7728107798566122&quot;&#10;            data-ad-slot=&quot;5951785085&quot;&#10;            ref={adRef}&#10;          &gt;&lt;/ins&gt;&#10;        &lt;/div&gt;&#10;        {related.length &gt; 0 &amp;&amp; (&#10;          &lt;RelatedSection&gt;&#10;            &lt;RelatedTitle&gt;&lt;FaLink /&gt; 関連ページ&lt;/RelatedTitle&gt;&#10;            &lt;RelatedList&gt;&#10;              {related.map(r =&gt; (&#10;                &lt;RelatedCard to={`/?p=${r.slug}`} key={r.slug}&gt;&#10;                  &lt;RelatedImage style={{borderRadius:'18px', width:'90px', height:'90px', objectFit:'cover', marginBottom:'0.7em'}} src={r.image} alt={r.title} /&gt;&#10;                  &lt;RelatedCardTitle&gt;{r.title}&lt;/RelatedCardTitle&gt;&#10;                &lt;/RelatedCard&gt;&#10;              ))}&#10;            &lt;/RelatedList&gt;&#10;          &lt;/RelatedSection&gt;&#10;        )}&#10;        &lt;BackLink to=&quot;/&quot;&gt;&#10;          &lt;FaArrowLeft /&gt; トップページへ戻る&#10;        &lt;/BackLink&gt;&#10;      &lt;/ArticleContainer&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default ArticlePage;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useRef, useMemo } from 'react';&#10;import { Link } from 'react-router-dom';&#10;import styled from '@emotion/styled';&#10;import { theme } from '../styles/theme';&#10;import { FaLink, FaArrowLeft } from 'react-icons/fa';&#10;import article1234 from '../articles/1234';&#10;import article1235 from '../articles/1235';&#10;import articleTest from '../articles/test';&#10;import { fetchArticleById } from '../api/microcms';&#10;&#10;// JSONファイルを一括取得（記事一覧を作るため）&#10;function importAllJson(r) {&#10;  return r.keys().map(key =&gt; {&#10;    const data = r(key);&#10;    return {&#10;      id: data.id || data.slug || key.replace(/^.*[/]/, '').replace(/\.json$/, ''),&#10;      ...data&#10;    };&#10;  });&#10;}&#10;&#10;const jsonArticles = importAllJson(require.context('../articles', false, /\.json$/));&#10;&#10;// ローカル記事配列（JSON から読み込んだもの + hand-coded modules）&#10;const blogPosts = [&#10;  ...jsonArticles,&#10;  article1234,&#10;  article1235,&#10;  articleTest&#10;];&#10;&#10;// Google AdSense script を head に挿入するユーティリティ（重複挿入を防止）&#10;function useAdsenseScript() {&#10;  // 実行環境でのみ DOM にスクリプトを挿入&#10;  try {&#10;    if (typeof document === 'undefined') return;&#10;    if (!document.querySelector('script[src*=&quot;adsbygoogle.js?client=ca-pub-7728107798566122&quot;]')) {&#10;      const script = document.createElement('script');&#10;      script.async = true;&#10;      script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7728107798566122';&#10;      script.crossOrigin = 'anonymous';&#10;      document.head.appendChild(script);&#10;    }&#10;  } catch (e) {&#10;    // サーバーサイド環境やテスト環境では無視&#10;  }&#10;}&#10;&#10;// 目次生成関数&#10;function generateTocAndContent(html) {&#10;  if (!html) return { toc: [], html };&#10;  let idx = 0;&#10;  const toc = [];&#10;  // h2/h3タグにidを付与しつつtoc配列を作る&#10;  let newHtml = html.replace(/&lt;(h[23])([^&gt;]*)&gt;(.*?)&lt;\/\1&gt;/g, (match, tag, attrs, text) =&gt; {&#10;    const cleanText = text.replace(/&lt;[^&gt;]+&gt;/g, '');&#10;    const id = `heading-${tag}-${idx++}`;&#10;    toc.push({ tag, text: cleanText, id });&#10;    return `&lt;${tag} id=&quot;${id}&quot;${attrs}&gt;${text}&lt;/${tag}&gt;`;&#10;  });&#10;  // imgタグのsrcが/contents/で始まる場合、絶対パスに補正&#10;  newHtml = newHtml.replace(/&lt;img([^&gt;]*?)src=[&quot;'](\/contents\/[^&quot;'&gt;]+)[&quot;']([^&gt;]*)&gt;/g, (match, before, src, after) =&gt; {&#10;    return `&lt;img${before}src=&quot;${src}&quot;${after}&gt;`;&#10;  });&#10;&#10;  // --- 追加: img の inline 属性(width/height/style) を削除し class=&quot;cms-image&quot; を付与 ---&#10;  newHtml = newHtml.replace(/&lt;img([^&gt;]*)&gt;/g, (match, attrs) =&gt; {&#10;    // attrs 部から width, height, style を削除&#10;    let cleaned = attrs.replace(/\s*(width|height)=[&quot;'][^&quot;']*[&quot;']/gi, '');&#10;    cleaned = cleaned.replace(/\s*style=[&quot;'][^&quot;']*[&quot;']/gi, '');&#10;    // class があれば追記、なければ追加&#10;    if (/class=/.test(cleaned)) {&#10;      cleaned = cleaned.replace(/class=(&quot;|')(.*?)(&quot;|')/i, (m, q, cls) =&gt; `class=${q}${cls} cms-image${q}`);&#10;    } else {&#10;      cleaned = `${cleaned} class=&quot;cms-image&quot;`;&#10;    }&#10;    return `&lt;img${cleaned}&gt;`;&#10;  });&#10;&#10;  return { toc, html: newHtml };&#10;}&#10;&#10;const TocList = styled.ul`&#10;  list-style: none;&#10;  margin: 0;&#10;  padding: 0;&#10;`;&#10;const TocItem = styled.li`&#10;  margin: 0.2em 0 0.2em 0.5em;&#10;  &amp;.toc-h3 { margin-left: 1.5em; font-size: 0.95em; }&#10;`;&#10;const TocLink = styled.a`&#10;  color: #2E7D32;&#10;  text-decoration: none;&#10;  &amp;:hover { text-decoration: underline; color: #1B5E20; }&#10;`;&#10;&#10;&#10;// 目次(Toc)コンポーネント&#10;const TocContainer = styled.nav`&#10;  background: #f6fff6;&#10;  border: 2px solid #2E7D32;&#10;  border-radius: 12px;&#10;  padding: 1em 1.5em;&#10;  margin: 2em auto 2em auto;&#10;  font-size: 0.98rem;&#10;  width: 60%;&#10;  max-width: 500px;&#10;  min-width: 220px;&#10;  box-sizing: border-box;&#10;  display: block;&#10;  @media (max-width: 600px) {&#10;    width: 80vw;&#10;    font-size: 0.92rem;&#10;    padding: 0.7em 0.7em;&#10;  }&#10;`;&#10;const ArticleContent = styled.div`&#10;  color: ${theme.colors.text};&#10;  font-size: 1.0rem; /* 基本フォントを小さめに調整 */&#10;  line-height: 1.7;&#10;  font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;&#10;  h2 {&#10;    color: ${theme.colors.primary};&#10;    font-size: 1.5rem;&#10;    border-left: 7px solid ${theme.colors.primary};&#10;    border-radius: 0 12px 12px 0;&#10;    padding-left: 0.7em;&#10;    margin: 2em 0 1em 0;&#10;    font-weight: bold;&#10;    background: #f6fff6;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  h3 {&#10;    color: ${theme.colors.secondary};&#10;    font-size: 1.2rem;&#10;    margin: 1.5em 0 0.7em 0;&#10;    font-weight: bold;&#10;    border-left: 5px solid ${theme.colors.secondary};&#10;    border-radius: 0 10px 10px 0;&#10;    padding-left: 0.6em;&#10;    background: #eaffea;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  h4 {&#10;    color: ${theme.colors.accent};&#10;    font-size: 1.05rem;&#10;    margin: 1.2em 0 0.5em 0;&#10;    font-weight: bold;&#10;    border-left: 4px dashed ${theme.colors.accent};&#10;    border-radius: 0 8px 8px 0;&#10;    padding-left: 0.5em;&#10;    background: #f9fff6;&#10;    font-family: 'Rounded Mplus 1c', 'Noto Sans JP', 'Meiryo', 'Hiragino Maru Gothic Pro', Arial, sans-serif;&#10;  }&#10;  strong, .em {&#10;    color: ${theme.colors.highlight};&#10;    background: #fffbe6;&#10;    font-weight: bold;&#10;    padding: 0 0.2em;&#10;    border-radius: 4px;&#10;  }&#10;&#10;  /* 本文内画像を大きく表示するスタイル */&#10;  img,&#10;  .cms-image {&#10;    border-radius: 16px;&#10;    /* デフォルトはコンテナ幅より左右に少し拡張して大きく見せる */&#10;    width: calc(100% + 120px) !important;&#10;    max-width: none !important;&#10;    height: auto !important;&#10;    object-fit: cover;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.07);&#10;    margin: 1.6em -32px;&#10;    display: block;&#10;  }&#10;&#10;  /* タブレットで少し控えめに */&#10;  @media (max-width: 900px) {&#10;    img,&#10;    .cms-image {&#10;      width: calc(100% + 80px) !important;&#10;      margin: 1.4em -16px;&#10;    }&#10;  }&#10;&#10;  /* モバイルでは画像を少しはみ出させて目立たせつつ中央寄せ */&#10;  @media (max-width: 600px) {&#10;    font-size: 1.02rem; /* モバイルでも少し小さめに */&#10;    img.cms-image,&#10;    img {&#10;      width: calc(100% + 32px) !important;&#10;      max-width: none !important;&#10;      margin: 1.2em 50%;&#10;      transform: translateX(-50%);&#10;      border-radius: 12px;&#10;      display: block;&#10;    }&#10;  }&#10;`;&#10;&#10;const ArticleContainer = styled.div`&#10;  max-width: 700px;&#10;  margin: 40px auto;&#10;  background: #fff;&#10;  border-radius: 8px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.08);&#10;  padding: ${theme.spacing.xlarge};&#10;`;&#10;const ArticleTitle = styled.h1`&#10;  font-size: 1.2rem; // 小さめに変更&#10;  color: ${theme.colors.primary};&#10;  margin-bottom: ${theme.spacing.medium};&#10;`;&#10;const ArticleImageEyeCatch = styled.img`&#10;  width: 100%;&#10;  aspect-ratio: 4 / 3;&#10;  object-fit: cover;&#10;  border-radius: 18px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.13);&#10;  background: #fff;&#10;  margin-bottom: 1.5em;&#10;`;&#10;const BackLink = styled(Link)`&#10;  display: inline-flex;&#10;  align-items: center;&#10;  gap: 0.5em;&#10;  margin-top: ${theme.spacing.large};&#10;  color: ${theme.colors.primary};&#10;  text-decoration: none;&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  background: #f6fff6;&#10;  border-radius: 6px;&#10;  padding: 0.5em 1.2em;&#10;  box-shadow: 0 2px 8px rgba(0,128,64,0.07);&#10;  border: 1.5px solid ${theme.colors.primary}33;&#10;  transition: background 0.2s, color 0.2s, border 0.2s;&#10;  &amp;:hover {&#10;    background: ${theme.colors.primary};&#10;    color: #fff;&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;&#10;// 関連記事リスト&#10;const RelatedSection = styled.div`&#10;  margin-top: 48px;&#10;  text-align: center;&#10;`;&#10;const RelatedTitle = styled.h3`&#10;  color: ${theme.colors.primary};&#10;  font-size: 1.3rem;&#10;  font-weight: bold;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.5em;&#10;  margin-bottom: 1.5em;&#10;`;&#10;const RelatedList = styled.div`&#10;  display: flex;&#10;  flex-wrap: wrap;&#10;  justify-content: center;&#10;  gap: 2em;&#10;`;&#10;const RelatedCard = styled(Link)`&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  width: 180px;&#10;  background: #f6fff6;&#10;  border-radius: 12px;&#10;  box-shadow: 0 2px 8px rgba(0,0,0,0.07);&#10;  text-decoration: none;&#10;  transition: box-shadow 0.2s;&#10;  border: 2px solid ${theme.colors.primary}22;&#10;  padding: 1em 0.5em 1.2em 0.5em;&#10;  &amp;:hover {&#10;    box-shadow: 0 4px 16px rgba(0,128,64,0.13);&#10;    border-color: ${theme.colors.primary};&#10;  }&#10;`;&#10;const RelatedImage = styled.img`&#10;  width: 100%;&#10;  aspect-ratio: 4 / 3;&#10;  object-fit: cover;&#10;  border-radius: 18px;&#10;  margin-bottom: 0.7em;&#10;`;&#10;const RelatedCardTitle = styled.div`&#10;  color: ${theme.colors.primary};&#10;  font-weight: bold;&#10;  font-size: 1.05rem;&#10;  text-align: center;&#10;  margin-top: 0.2em;&#10;`;&#10;&#10;const ArticlePage = (props) =&gt; {&#10;  useAdsenseScript();&#10;  const adRef = useRef(null);&#10;  const id = props.id;&#10;  const [cmsArticle, setCmsArticle] = React.useState(null);&#10;  const post = useMemo(() =&gt; {&#10;    // まずローカル記事を探す&#10;    const local = blogPosts.find(p =&gt; p.slug === id || p.id === id);&#10;    if (local) return local;&#10;    // microCMS記事（APIで取得）&#10;    return cmsArticle;&#10;  }, [id, cmsArticle]);&#10;&#10;  useEffect(() =&gt; {&#10;    window.scrollTo(0, 0);&#10;    // ローカル記事がなければmicroCMS APIで取得&#10;    if (!blogPosts.find(p =&gt; p.slug === id || p.id === id)) {&#10;      fetchArticleById(id).then(data =&gt; setCmsArticle(data)).catch(() =&gt; setCmsArticle(null));&#10;    }&#10;  }, [id]);&#10;&#10;  // AdSense広告の初期化&#10;  useEffect(() =&gt; {&#10;    if (window.adsbygoogle &amp;&amp; adRef.current) {&#10;      try {&#10;        window.adsbygoogle.push({});&#10;      } catch (e) {}&#10;    }&#10;  }, [id]);&#10;  // 目次とid付きHTML生成&#10;  const { toc, html: contentWithIds } = useMemo(() =&gt; generateTocAndContent(post?.content), [post]);&#10;  // 関連記事（同じカテゴリで自分以外）&#10;  const related = blogPosts.filter(p =&gt; p.category === post?.category &amp;&amp; p.slug !== id);&#10;&#10;  if (!post) {&#10;    return &lt;ArticleContainer&gt;記事が見つかりませんでした。&lt;/ArticleContainer&gt;;&#10;  }&#10;&#10;  // アイキャッチ画像&#10;  const imageUrl = post.image?.url || post.image;&#10;&#10;  return (&#10;    &lt;&gt;&#10;  {/* EyeCatch削除: 記事ごとの画像のみ表示 */}&#10;      &lt;ArticleContainer&gt;&#10;        &lt;ArticleTitle&gt;{post.title}&lt;/ArticleTitle&gt;&#10;        &lt;div style={{display:'flex', justifyContent:'center'}}&gt;&#10;          &lt;ArticleImageEyeCatch src={imageUrl} alt={post.title} /&gt;&#10;        &lt;/div&gt;&#10;        {/* 目次 */}&#10;        {toc.length &gt; 0 &amp;&amp; (&#10;          &lt;TocContainer aria-label=&quot;目次&quot;&gt;&#10;            &lt;strong style={{color:'#1B5E20'}}&gt;目次&lt;/strong&gt;&#10;            &lt;TocList&gt;&#10;              {toc.map(item =&gt; (&#10;                &lt;TocItem key={item.id} className={`toc-${item.tag}`}&gt;&#10;                  &lt;TocLink href={`#${item.id}`}&gt;{item.text}&lt;/TocLink&gt;&#10;                &lt;/TocItem&gt;&#10;              ))}&#10;            &lt;/TocList&gt;&#10;          &lt;/TocContainer&gt;&#10;        )}&#10;        &lt;ArticleContent dangerouslySetInnerHTML={{ __html: contentWithIds }} /&gt;&#10;        {/* Google AdSense in-article広告ユニット */}&#10;        &lt;div style={{margin: '32px 0', display: 'flex', justifyContent: 'center'}}&gt;&#10;          &lt;ins className=&quot;adsbygoogle&quot;&#10;            style={{ display: 'block', textAlign: 'center' }}&#10;            data-ad-layout=&quot;in-article&quot;&#10;            data-ad-format=&quot;fluid&quot;&#10;            data-ad-client=&quot;ca-pub-7728107798566122&quot;&#10;            data-ad-slot=&quot;5951785085&quot;&#10;            ref={adRef}&#10;          &gt;&lt;/ins&gt;&#10;        &lt;/div&gt;&#10;        {related.length &gt; 0 &amp;&amp; (&#10;          &lt;RelatedSection&gt;&#10;            &lt;RelatedTitle&gt;&lt;FaLink /&gt; 関連ページ&lt;/RelatedTitle&gt;&#10;            &lt;RelatedList&gt;&#10;              {related.map(r =&gt; (&#10;                &lt;RelatedCard to={`/?p=${r.slug}`} key={r.slug}&gt;&#10;                  &lt;RelatedImage style={{borderRadius:'18px', width:'90px', height:'90px', objectFit:'cover', marginBottom:'0.7em'}} src={r.image} alt={r.title} /&gt;&#10;                  &lt;RelatedCardTitle&gt;{r.title}&lt;/RelatedCardTitle&gt;&#10;                &lt;/RelatedCard&gt;&#10;              ))}&#10;            &lt;/RelatedList&gt;&#10;          &lt;/RelatedSection&gt;&#10;        )}&#10;        &lt;BackLink to=&quot;/&quot;&gt;&#10;          &lt;FaArrowLeft /&gt; トップページへ戻る&#10;        &lt;/BackLink&gt;&#10;      &lt;/ArticleContainer&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default ArticlePage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>