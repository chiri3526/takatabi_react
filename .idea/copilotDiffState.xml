<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/scripts/convert_iife_to_global.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/convert_iife_to_global.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;function extractAndRemove(marker) {&#10;  const res = [];&#10;  let idx = s.indexOf(marker);&#10;  while (idx !== -1) {&#10;    const start = idx;&#10;    const bodyStart = s.indexOf('{', start);&#10;    if (bodyStart === -1) break;&#10;    // find the matching closing '})();' -- search for '})();' after start&#10;    const endMarker = '})();';&#10;    const end = s.indexOf(endMarker, bodyStart);&#10;    if (end === -1) break;&#10;    const body = s.substring(bodyStart + 1, end); // inside braces&#10;    res.push(body);&#10;    // remove this whole IIFE&#10;    s = s.slice(0, start) + s.slice(end + endMarker.length);&#10;    idx = s.indexOf(marker, start);&#10;  }&#10;  return res;&#10;}&#10;const mergeMarker = '(function mergeSeparatedExtInner()';&#10;const hideMarker = '(function hideTextOnlyExternalAnchors()';&#10;const mergeBodies = extractAndRemove(mergeMarker);&#10;const hideBodies = extractAndRemove(hideMarker);&#10;// choose first body if exists&#10;const mergeBody = mergeBodies.length ? mergeBodies[0] : null;&#10;const hideBody = hideBodies.length ? hideBodies[0] : null;&#10;// prepare global function strings&#10;let insertFuncs = '\n    // --- converted: global utility functions for merging/hiding external links ---\n';&#10;if (mergeBody) {&#10;  insertFuncs += '    window.mergeSeparatedExtInner = function() {' + mergeBody + '    };\n    ';&#10;}&#10;if (hideBody) {&#10;  insertFuncs += '    window.hideTextOnlyExternalAnchors = function() {' + hideBody + '    };\n    ';&#10;}&#10;// Insert after the first occurrence of 'processAnchors();' (the initial call)&#10;const procIdx = s.indexOf('processAnchors();');&#10;if (procIdx === -1) {&#10;  console.error('processAnchors(); not found after cleanup');&#10;  fs.writeFileSync(file, s, 'utf8');&#10;  process.exit(1);&#10;}&#10;// position after the line&#10;const afterLine = s.indexOf('\n', procIdx + 'processAnchors();'.length);&#10;const before = s.slice(0, afterLine + 1);&#10;const after = s.slice(afterLine + 1);&#10;let newS = before + '\n' + insertFuncs + '\n' + after;&#10;// ensure initial calls: add calls right after processAnchors(); if not present&#10;if (!/mergeSeparatedExtInner\(\)/.test(newS.slice(afterLine, afterLine + 200))) {&#10;  newS = newS.replace('processAnchors();', 'processAnchors();\n    window.mergeSeparatedExtInner &amp;&amp; window.mergeSeparatedExtInner();\n    window.hideTextOnlyExternalAnchors &amp;&amp; window.hideTextOnlyExternalAnchors();');&#10;}&#10;// modify observer setTimeout to also call the functions&#10;newS = newS.replace(/setTimeout\(processAnchors,\s*50\);/g, `setTimeout(()=&gt;{ processAnchors(); window.mergeSeparatedExtInner &amp;&amp; window.mergeSeparatedExtInner(); window.hideTextOnlyExternalAnchors &amp;&amp; window.hideTextOnlyExternalAnchors(); }, 50);`);&#10;fs.writeFileSync(file, newS, 'utf8');&#10;console.log('Converted IIFEs to global functions and wired calls.');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/dedupe_merge_iife.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/dedupe_merge_iife.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;// find all occurrences of '(function mergeSeparatedExtInner()' and keep only first IIFE&#10;const marker = '(function mergeSeparatedExtInner()';&#10;let idx = s.indexOf(marker);&#10;if (idx === -1) { console.log('No merge IIFE found'); process.exit(0); }&#10;// find end of first IIFE&#10;const firstEnd = s.indexOf('})();', idx);&#10;if (firstEnd === -1) { console.error('first IIFE not closed'); process.exit(1); }&#10;// remove any further occurrences of the marker and their bodies until '})();' following them&#10;let pos = firstEnd + '})();'.length;&#10;while (true) {&#10;  const nextIdx = s.indexOf(marker, pos);&#10;  if (nextIdx === -1) break;&#10;  const nextEnd = s.indexOf('})();', nextIdx);&#10;  if (nextEnd === -1) break;&#10;  // remove from nextIdx to nextEnd+'})();'.length&#10;  s = s.slice(0, nextIdx) + s.slice(nextEnd + '})();'.length);&#10;  pos = nextIdx; // continue after removed segment&#10;}&#10;fs.writeFileSync(file, s, 'utf8');&#10;console.log('Removed duplicate mergeSeparatedExtInner occurrences');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/hide_text_only_external_anchors.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/hide_text_only_external_anchors.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;const startMarker = '(function mergeSeparatedExtInner(){';&#10;const startIdx = s.indexOf(startMarker);&#10;if (startIdx === -1) {&#10;  console.error('merge IIFE not found'); process.exit(1);&#10;}&#10;// find end of that IIFE '})();' after startIdx&#10;const endIdx = s.indexOf('})();', startIdx);&#10;if (endIdx === -1) { console.error('end of merge IIFE not found'); process.exit(1); }&#10;const insertPos = endIdx + '})();'.length;&#10;const snippet = `\n\n    // --- 追加: テキストだけの a.external-link（URLそのものを表示しているもの）を非表示にする ---\n    (function hideTextOnlyExternalAnchors(){\n      try {\n        const containerEl = articleContentRef?.current || document.body;\n        if (!containerEl) return;\n        const anchors = Array.from(containerEl.querySelectorAll('a.external-link'));&#10;        anchors.forEach(a =&gt; {\n          try {\n            // skip anchors that have structured content or arrow inside&#10;            if (a.querySelector('.ext-inner') || a.querySelector('.ext-arrow')) return;\n            const href = (a.getAttribute('href') || '').trim();\n            const txt = (a.textContent || '').trim();\n            if (!href) return;\n            if (!txt) { a.style.display = 'none'; return; }\n            // if text exactly equals href (or equals href without protocol), hide it&#10;            const noProto = href.replace(/^https?:\/\//, '');\n            if (txt === href || txt === noProto) {\n              a.style.display = 'none';\n            }\n          } catch (e) {}\n        });\n      } catch (e) {}\n    })();\n\n`;&#10;const newS = s.slice(0, insertPos) + snippet + s.slice(insertPos);&#10;fs.writeFileSync(file, newS, 'utf8');&#10;console.log('Inserted hideTextOnlyExternalAnchors snippet');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/inject_hide_after_last_merge.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/inject_hide_after_last_merge.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;// find last occurrence of the merge IIFE&#10;const marker = '(function mergeSeparatedExtInner()';&#10;let idx = s.lastIndexOf(marker);&#10;if (idx === -1) { console.error('merge IIFE not found'); process.exit(1); }&#10;// find the closing '})();' after idx&#10;const closeIdx = s.indexOf('})();', idx);&#10;if (closeIdx === -1) { console.error('closing of merge IIFE not found'); process.exit(1); }&#10;const insertPos = closeIdx + '})();'.length;&#10;const snippet = `\n\n    // --- 追加: テキストのみの a.external-link を非表示にする（URLだけのもの） ---\n    (function hideTextOnlyExternalAnchors(){\n      try {\n        const containerEl = articleContentRef?.current || document.body;\n        if (!containerEl) return;\n        const anchors = Array.from(containerEl.querySelectorAll('a.external-link'));&#10;        anchors.forEach(a =&gt; {\n          try {\n            // 既にカード形式で内部要素がある場合は無視\n            if (a.querySelector('.ext-inner') || a.querySelector('.ext-arrow')) return;\n            // テキストノードのみかどうか判定（子要素が無い）\n            const hasElementChild = Array.from(a.childNodes).some(n =&gt; n.nodeType === 1);\n            if (hasElementChild) return;\n            const txt = (a.textContent || '').trim();\n            const href = (a.getAttribute('href') || '').trim();\n            if (!txt) { a.style.display = 'none'; return; }\n            const noProto = href.replace(/^https?:\/\//, '');\n            if (txt === href || txt === noProto) { a.style.display = 'none'; }\n          } catch (e) {}\n        });\n      } catch (e) {}\n    })();\n\n`;&#10;const newS = s.slice(0, insertPos) + snippet + s.slice(insertPos);&#10;fs.writeFileSync(file, newS, 'utf8');&#10;console.log('Inserted hideTextOnlyExternalAnchors after last merge IIFE');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/patch_hide_regex.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/patch_hide_regex.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;const oldLine = &quot;const noProto = href.replace(/^https?://, '');&quot;;&#10;const newLine = &quot;const noProto = href.replace(/^https?:\\/\\//, '');&quot;;&#10;if (s.indexOf(oldLine) === -1) {&#10;  console.log('Old line not found, attempting looser replace');&#10;  // try to replace unescaped pattern using regex&#10;  const re = /const\s+noProto\s*=\s*href\.replace\(\s*\/\^https\?:\/\/\s*\/,\s*''\s*\);/;&#10;  if (re.test(s)) {&#10;    s = s.replace(re, newLine);&#10;    fs.writeFileSync(file, s, 'utf8');&#10;    console.log('Replaced via regex');&#10;  } else {&#10;    // fallback: replace the simpler variant where slashes aren't escaped&#10;    const oldSimple = &quot;const noProto = href.replace(/^https?:///, '');&quot;;&#10;    if (s.indexOf(oldSimple) !== -1) {&#10;      s = s.replace(oldSimple, newLine);&#10;      fs.writeFileSync(file, s, 'utf8');&#10;      console.log('Replaced oldSimple');&#10;    } else {&#10;      console.error('Could not find the target line to replace');&#10;      process.exit(1);&#10;    }&#10;  }&#10;} else {&#10;  s = s.replace(oldLine, newLine);&#10;  fs.writeFileSync(file, s, 'utf8');&#10;  console.log('Replaced exact oldLine');&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/remove_duplicate_merge_iifes_v2.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/remove_duplicate_merge_iifes_v2.js" />
              <option name="updatedContent" value="const fs = require('fs');&#10;const path = require('path');&#10;const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');&#10;let s = fs.readFileSync(file, 'utf8');&#10;const marker = '(function mergeSeparatedExtInner(';&#10;let positions = [];&#10;let idx = s.indexOf(marker);&#10;while (idx !== -1) {&#10;  positions.push(idx);&#10;  idx = s.indexOf(marker, idx + 1);&#10;}&#10;if (positions.length &lt;= 1) {&#10;  console.log('No duplicate markers found, nothing to do.');&#10;  process.exit(0);&#10;}&#10;// Keep first occurrence, remove the rest&#10;const firstPos = positions[0];&#10;let newS = s.slice(0, firstPos);&#10;// copy first IIFE through its closing '})();'&#10;const firstEnd = s.indexOf('})();', firstPos);&#10;if (firstEnd === -1) { console.error('First IIFE not closed'); process.exit(1); }&#10;newS += s.slice(firstPos, firstEnd + 4 + 1); // '})();' length 4 plus maybe newline&#10;// Now for remaining markers, skip their bodies&#10;let cur = firstEnd + 4 + 1;&#10;// Append rest of file after removing subsequent IIFEs&#10;// We'll iterate through remaining positions and skip between start and end&#10;for (let i = 1; i &lt; positions.length; i++) {&#10;  const start = positions[i];&#10;  const end = s.indexOf('})();', start);&#10;  if (end === -1) {&#10;    // if not found, skip to end&#10;    cur = s.length;&#10;    break;&#10;  }&#10;  // Append content from cur up to start&#10;  newS += s.slice(cur, start);&#10;  cur = end + 4 + 1; // move past '})();' and following newline maybe&#10;}&#10;// append remaining tail&#10;if (cur &lt; s.length) newS += s.slice(cur);&#10;fs.writeFileSync(file, newS, 'utf8');&#10;console.log('Removed duplicate mergeSeparatedExtInner IIFEs, kept first.');&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>