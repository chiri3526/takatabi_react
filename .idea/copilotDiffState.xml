<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/pages/HomePage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/HomePage.js" />
              <option name="originalContent" value="import takatabi1 from '../contents/LP/takatabi1.png';&#10;import React, { useEffect, useState } from 'react';&#10;import styled from '@emotion/styled';&#10;import { Link } from 'react-router-dom';&#10;import { theme } from '../styles/theme';&#10;import { fetchArticles } from '../api/microcms';&#10;&#10;import { FaMapMarkerAlt, FaGlobeAsia, FaCouch, FaTrain } from 'react-icons/fa';&#10;&#10;const TopLogo = styled.div`&#10;  width: 100%;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin-bottom: 0;&#10;&#10;  img {&#10;    width: 50%;&#10;    height: 70px;&#10;    border-radius: 0;&#10;    object-fit: contain;&#10;    margin: 0 auto;&#10;    display: block;&#10;  }&#10;`;&#10;&#10;const BlogGrid = styled.div`&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: ${theme.spacing.large};&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;&#10;// 4区画レイアウト用のスタイル（欠如していた定義を追加）&#10;const CategorySection = styled.section`&#10;  margin-bottom: ${theme.spacing.xlarge};&#10;`;&#10;const CategoryHeader = styled.div`&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  margin-bottom: ${theme.spacing.medium};&#10;`;&#10;const CategoryIcon = styled.div`&#10;  color: ${theme.colors.primary};&#10;  font-size: 2.5rem;&#10;  margin-bottom: 0.5em;&#10;`;&#10;const CategoryTitle = styled.h2`&#10;  font-family: ${theme.font.family};&#10;  font-weight: ${theme.font.weightBold};&#10;  color: ${theme.colors.primary};&#10;  font-size: 1.5rem;&#10;  margin: 0;&#10;  text-align: center;&#10;`;&#10;&#10;const BlogCard = styled.article`&#10;  background: ${theme.colors.white};&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;&#10;  &amp;:hover {&#10;    transform: translateY(-5px);&#10;  }&#10;`;&#10;&#10;const BlogImage = styled.img`&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;`;&#10;&#10;const BlogContent = styled.div`&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;&#10;const BlogTitle = styled.h2`&#10;  color: ${theme.colors.text};&#10;  margin: 0 0 ${theme.spacing.small};&#10;  font-size: 1rem; // 小さめに変更&#10;`;&#10;&#10;const BlogExcerpt = styled.p`&#10;  color: ${theme.colors.text};&#10;  margin: 0;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;`;&#10;&#10;// 追加: 日付表示用スタイル&#10;const DateText = styled.div`&#10;  color: ${theme.colors.text}99;&#10;  font-size: 0.85rem;&#10;  margin-bottom: 0.4em;&#10;`;&#10;&#10;// ローカルのJSON記事は現在トップ表示に使用していないため除外しています。&#10;// 必要ならここにローカル記事を追加してください。&#10;&#10;// 日付を日本語表記で整形するユーティリティ&#10;function formatDate(iso) {&#10;  if (!iso) return '';&#10;  try {&#10;    const d = new Date(iso);&#10;    if (Number.isNaN(d.getTime())) return '';&#10;    return `${d.getFullYear()}年${d.getMonth() + 1}月${d.getDate()}日`;&#10;  } catch (e) {&#10;    return '';&#10;  }&#10;}&#10;&#10;const categories = [&#10;  { key: 'domestic', label: '国内旅行', cmsName: '国内旅行', icon: &lt;FaMapMarkerAlt /&gt; },&#10;  { key: 'overseas', label: '海外旅行', cmsName: '海外旅行', icon: &lt;FaGlobeAsia /&gt; },&#10;  { key: 'lounge', label: 'ラウンジ', cmsName: 'ラウンジ', icon: &lt;FaCouch /&gt; },&#10;  { key: 'train', label: '鉄道', cmsName: '鉄道', icon: &lt;FaTrain /&gt; }&#10;];&#10;&#10;const HomePage = () =&gt; {&#10;  const [cmsArticles, setCmsArticles] = useState([]);&#10;&#10;  useEffect(() =&gt; {&#10;    window.scrollTo(0, 0);&#10;    // microCMSから記事取得&#10;    fetchArticles().then(data =&gt; {&#10;      if (data &amp;&amp; data.contents) {&#10;        setCmsArticles(data.contents);&#10;      }&#10;    });&#10;  }, []);&#10;&#10;  // microCMS記事のみ表示&#10;  return (&#10;    &lt;&gt;&#10;      &lt;TopLogo&gt;&#10;        &lt;img src={takatabi1} alt=&quot;takatabi&quot; style={{width:'50%', height:'70px', borderRadius:'0'}} /&gt;&#10;      &lt;/TopLogo&gt;&#10;      {categories.map(cat =&gt; {&#10;        // microCMS記事のみ抽出&#10;        const cmsForCat = cmsArticles.filter(post =&gt; {&#10;          if (post.category &amp;&amp; typeof post.category === 'object') {&#10;            return post.category.name === cat.cmsName;&#10;          }&#10;          return post.category === cat.key;&#10;        });&#10;        const postsToShow = cmsForCat.slice(0, 4);&#10;        return (&#10;          &lt;CategorySection key={cat.key}&gt;&#10;            &lt;CategoryHeader&gt;&#10;              &lt;CategoryIcon&gt;{cat.icon}&lt;/CategoryIcon&gt;&#10;              &lt;CategoryTitle&gt;{cat.label}&lt;/CategoryTitle&gt;&#10;            &lt;/CategoryHeader&gt;&#10;            &lt;BlogGrid&gt;&#10;              {postsToShow.map(post =&gt; (&#10;                &lt;Link&#10;                  to={`/?p=${post.slug || post.id}`}&#10;                  key={post.id}&#10;                  style={{ textDecoration: 'none' }}&#10;                &gt;&#10;                  &lt;BlogCard&gt;&#10;                    &lt;BlogImage&#10;                      src={post.image?.url || post.image}&#10;                      alt={post.title}&#10;                      onError={(e) =&gt; {&#10;                        e.target.src = '/sample-images/no-image.jpg';&#10;                      }}&#10;                    /&gt;&#10;                    &lt;BlogContent&gt;&#10;+                      {/* 追加: 作成日を表示 */}&#10;+                      &lt;DateText&gt;{formatDate(post.publishedAt || post.createdAt || post.updatedAt)}&lt;/DateText&gt;&#10;                      &lt;BlogTitle&gt;{post.title}&lt;/BlogTitle&gt;&#10;                      &lt;BlogExcerpt&gt;{post.excerpt}&lt;/BlogExcerpt&gt;&#10;                    &lt;/BlogContent&gt;&#10;                  &lt;/BlogCard&gt;&#10;                &lt;/Link&gt;&#10;              ))}&#10;            &lt;/BlogGrid&gt;&#10;          &lt;/CategorySection&gt;&#10;        );&#10;      })}&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default HomePage;&#10;" />
              <option name="updatedContent" value="import takatabi1 from '../contents/LP/takatabi1.png';&#10;import React, { useEffect, useState } from 'react';&#10;import styled from '@emotion/styled';&#10;import { Link } from 'react-router-dom';&#10;import { theme } from '../styles/theme';&#10;import { fetchArticles } from '../api/microcms';&#10;&#10;import { FaMapMarkerAlt, FaGlobeAsia, FaCouch, FaTrain } from 'react-icons/fa';&#10;&#10;const TopLogo = styled.div`&#10;  width: 100%;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  margin-bottom: 0;&#10;&#10;  img {&#10;    width: 50%;&#10;    height: 70px;&#10;    border-radius: 0;&#10;    object-fit: contain;&#10;    margin: 0 auto;&#10;    display: block;&#10;  }&#10;`;&#10;&#10;const BlogGrid = styled.div`&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: ${theme.spacing.large};&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;&#10;// 4区画レイアウト用のスタイル（欠如していた定義を追加）&#10;const CategorySection = styled.section`&#10;  margin-bottom: ${theme.spacing.xlarge};&#10;`;&#10;const CategoryHeader = styled.div`&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  margin-bottom: ${theme.spacing.medium};&#10;`;&#10;const CategoryIcon = styled.div`&#10;  color: ${theme.colors.primary};&#10;  font-size: 2.5rem;&#10;  margin-bottom: 0.5em;&#10;`;&#10;const CategoryTitle = styled.h2`&#10;  font-family: ${theme.font.family};&#10;  font-weight: ${theme.font.weightBold};&#10;  color: ${theme.colors.primary};&#10;  font-size: 1.5rem;&#10;  margin: 0;&#10;  text-align: center;&#10;`;&#10;&#10;const BlogCard = styled.article`&#10;  background: ${theme.colors.white};&#10;  border-radius: 8px;&#10;  overflow: hidden;&#10;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;&#10;  &amp;:hover {&#10;    transform: translateY(-5px);&#10;  }&#10;`;&#10;&#10;const BlogImage = styled.img`&#10;  width: 100%;&#10;  height: 200px;&#10;  object-fit: cover;&#10;`;&#10;&#10;const BlogContent = styled.div`&#10;  padding: ${theme.spacing.medium};&#10;`;&#10;&#10;const BlogTitle = styled.h2`&#10;  color: ${theme.colors.text};&#10;  margin: 0 0 ${theme.spacing.small};&#10;  font-size: 1rem; // 小さめに変更&#10;`;&#10;&#10;const BlogExcerpt = styled.p`&#10;  color: ${theme.colors.text};&#10;  margin: 0;&#10;  font-size: 0.9rem;&#10;  line-height: 1.5;&#10;`;&#10;&#10;// 追加: 日付表示用スタイル&#10;const DateText = styled.div`&#10;  color: ${theme.colors.text}99;&#10;  font-size: 0.85rem;&#10;  margin-bottom: 0.4em;&#10;`;&#10;&#10;// タグ用バッジ（日付の上に表示）&#10;const TagBadge = styled.span`&#10;  display: inline-block;&#10;  background: ${theme.colors.primary}11;&#10;  color: ${theme.colors.primary};&#10;  font-size: 0.75rem;&#10;  padding: 0.18rem 0.5rem;&#10;  border-radius: 999px;&#10;  margin-bottom: 0.35em;&#10;`;&#10;&#10;// ローカルのJSON記事は現在トップ表示に使用していないため除外しています。&#10;// 必要ならここにローカル記事を追加してください。&#10;&#10;// 日付を日本語表記で整形するユーティリティ&#10;function formatDate(iso) {&#10;  if (!iso) return '';&#10;  try {&#10;    const d = new Date(iso);&#10;    if (Number.isNaN(d.getTime())) return '';&#10;    return `${d.getFullYear()}年${d.getMonth() + 1}月${d.getDate()}日`;&#10;  } catch (e) {&#10;    return '';&#10;  }&#10;}&#10;&#10;const categories = [&#10;  { key: 'domestic', label: '国内旅行', cmsName: '国内旅行', icon: &lt;FaMapMarkerAlt /&gt; },&#10;  { key: 'overseas', label: '海外旅行', cmsName: '海外旅行', icon: &lt;FaGlobeAsia /&gt; },&#10;  { key: 'lounge', label: 'ラウンジ', cmsName: 'ラウンジ', icon: &lt;FaCouch /&gt; },&#10;  { key: 'train', label: '鉄道', cmsName: '鉄道', icon: &lt;FaTrain /&gt; }&#10;];&#10;&#10;const HomePage = () =&gt; {&#10;  const [cmsArticles, setCmsArticles] = useState([]);&#10;&#10;  useEffect(() =&gt; {&#10;    window.scrollTo(0, 0);&#10;    // microCMSから記事取得&#10;    fetchArticles().then(data =&gt; {&#10;      if (data &amp;&amp; data.contents) {&#10;        setCmsArticles(data.contents);&#10;      }&#10;    });&#10;  }, []);&#10;&#10;  // microCMS記事のみ表示&#10;  return (&#10;    &lt;&gt;&#10;      &lt;TopLogo&gt;&#10;        &lt;img src={takatabi1} alt=&quot;takatabi&quot; style={{width:'50%', height:'70px', borderRadius:'0'}} /&gt;&#10;      &lt;/TopLogo&gt;&#10;      {categories.map(cat =&gt; {&#10;        // microCMS記事のみ抽出&#10;        const cmsForCat = cmsArticles.filter(post =&gt; {&#10;          if (post.category &amp;&amp; typeof post.category === 'object') {&#10;            return post.category.name === cat.cmsName;&#10;          }&#10;          return post.category === cat.key;&#10;        });&#10;        const postsToShow = cmsForCat.slice(0, 4);&#10;        return (&#10;          &lt;CategorySection key={cat.key}&gt;&#10;            &lt;CategoryHeader&gt;&#10;              &lt;CategoryIcon&gt;{cat.icon}&lt;/CategoryIcon&gt;&#10;              &lt;CategoryTitle&gt;{cat.label}&lt;/CategoryTitle&gt;&#10;            &lt;/CategoryHeader&gt;&#10;            &lt;BlogGrid&gt;&#10;              {postsToShow.map(post =&gt; (&#10;                &lt;Link&#10;                  to={`/?p=${post.slug || post.id}`}&#10;                  key={post.id}&#10;                  style={{ textDecoration: 'none' }}&#10;                &gt;&#10;                  &lt;BlogCard&gt;&#10;                    &lt;BlogImage&#10;                      src={post.image?.url || post.image}&#10;                      alt={post.title}&#10;                      onError={(e) =&gt; {&#10;                        e.target.src = '/sample-images/no-image.jpg';&#10;                      }}&#10;                    /&gt;&#10;                    &lt;BlogContent&gt;&#10;+                      {/* 追加: タグを日付の上に表示（tag フィールドは string / object / array に対応） */}&#10;+                      {(() =&gt; {&#10;+                        const tagField = post.tag || post.tags || null; // 柔軟に対応&#10;+                        if (!tagField) return null;&#10;+                        // tagField が配列なら最初の要素を使う&#10;+                        if (Array.isArray(tagField) &amp;&amp; tagField.length &gt; 0) {&#10;+                          const t = tagField[0];&#10;+                          // オブジェクトなら name を使い、文字列ならそのまま表示&#10;+                          const label = (t &amp;&amp; typeof t === 'object') ? (t.name || t.id || '') : String(t);&#10;+                          return label ? &lt;TagBadge&gt;{label}&lt;/TagBadge&gt; : null;&#10;+                        }&#10;+                        // 文字列やオブジェクト単体&#10;+                        if (typeof tagField === 'string') return &lt;TagBadge&gt;{tagField}&lt;/TagBadge&gt;;&#10;+                        if (typeof tagField === 'object') return &lt;TagBadge&gt;{tagField.name || tagField.id || ''}&lt;/TagBadge&gt;;&#10;+                        return null;&#10;+                      })()}&#10;+                      {/* 追加: 作成日を表示 */}&#10;+                      &lt;DateText&gt;{formatDate(post.publishedAt || post.createdAt || post.updatedAt)}&lt;/DateText&gt;&#10;                     &lt;BlogTitle&gt;{post.title}&lt;/BlogTitle&gt;&#10;                     &lt;BlogExcerpt&gt;{post.excerpt}&lt;/BlogExcerpt&gt;&#10;                   &lt;/BlogContent&gt;&#10;                  &lt;/BlogCard&gt;&#10;                &lt;/Link&gt;&#10;              ))}&#10;            &lt;/BlogGrid&gt;&#10;          &lt;/CategorySection&gt;&#10;        );&#10;      })}&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default HomePage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>