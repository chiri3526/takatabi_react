const fs = require('fs');
const path = require('path');
const file = path.join(__dirname, '..', 'src', 'pages', 'ArticlePage.js');
let s = fs.readFileSync(file, 'utf8');
const needle = 'processAnchors();\n\n    // MutationObserver';
if (s.indexOf(needle) === -1) { console.error('Needle not found'); process.exit(1); }
const insert = `processAnchors();\n\n    // --- 追加: 分離している .ext-inner を隣接する a.external-link に統合する\n    const mergeExtInner = () => {\n      try {\n        const inners = Array.from(container.querySelectorAll('.ext-inner'));\n        inners.forEach(inner => {\n          if (inner.closest('a.external-link')) return;\n          const innerLink = inner.querySelector('a.external-link');\n          const hrefFromInner = innerLink ? innerLink.getAttribute('href') : null;\n          let anchor = null;\n          let prev = inner.previousElementSibling;\n          while (prev) { if (prev.tagName === 'A' && prev.classList.contains('external-link')) { anchor = prev; break; } prev = prev.previousElementSibling; }\n          if (!anchor) { let next = inner.nextElementSibling; while (next) { if (next.tagName === 'A' && next.classList.contains('external-link')) { anchor = next; break; } next = next.nextElementSibling; } }\n          if (!anchor) { anchor = document.createElement('a'); anchor.className = 'external-link'; if (hrefFromInner) anchor.setAttribute('href', hrefFromInner); anchor.setAttribute('target', '_blank'); anchor.setAttribute('rel', 'noopener noreferrer'); anchor.dataset.previewApplied = '1'; inner.parentNode.insertBefore(anchor, inner); }\n          const innerAnchors = Array.from(inner.querySelectorAll('a.external-link'));\n          innerAnchors.forEach(aEl => { try { const span = document.createElement('span'); span.className = 'ext-link-text'; span.textContent = aEl.textContent || aEl.getAttribute('href') || ''; aEl.parentNode.replaceChild(span, aEl); } catch (e) {} });\n          const possibleArrowAnchor = inner.nextElementSibling && inner.nextElementSibling.tagName === 'A' && inner.nextElementSibling.classList.contains('external-link') && inner.nextElementSibling.querySelector('.ext-arrow') ? inner.nextElementSibling : null;\n          if (possibleArrowAnchor) { const arrow = possibleArrowAnchor.querySelector('.ext-arrow'); if (arrow) anchor.appendChild(arrow); try { possibleArrowAnchor.parentNode.removeChild(possibleArrowAnchor); } catch (e) {} }\n          try { anchor.appendChild(inner); } catch (e) {}\n        });\n      } catch (e) {}\n    };\n\n    mergeExtInner();\n\n    // MutationObserver`;

s = s.replace(needle, insert);
fs.writeFileSync(file, s, 'utf8');
console.log('Inserted mergeExtInner after processAnchors()');
